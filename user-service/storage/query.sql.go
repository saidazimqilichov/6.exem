// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package storage

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id,name, email, password_hash) 
VALUES ($1, $2, $3, $4)
RETURNING id, name, email
`

type CreateUserParams struct {
	ID           string
	Name         string
	Email        sql.NullString
	PasswordHash string
}

type CreateUserRow struct {
	ID    string
	Name  string
	Email sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
	)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const forgotPassword = `-- name: ForgotPassword :one
SELECT  email  FROM users
WHERE id = $1
`

func (q *Queries) ForgotPassword(ctx context.Context, id string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, forgotPassword, id)
	var email sql.NullString
	err := row.Scan(&email)
	return email, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name , email FROM users
WHERE id = $1
`

type GetUserByIDRow struct {
	ID    string
	Name  string
	Email sql.NullString
}

func (q *Queries) GetUserByID(ctx context.Context, id string) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const logOutUser = `-- name: LogOutUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) LogOutUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, logOutUser, id)
	return err
}

const loginUser = `-- name: LoginUser :one
SELECT password_hash FROM users
WHERE id = $1
`

func (q *Queries) LoginUser(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, loginUser, id)
	var password_hash string
	err := row.Scan(&password_hash)
	return password_hash, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
SET password_hash = $1
WHERE email = $2
`

type UpdatePasswordParams struct {
	PasswordHash string
	Email        sql.NullString
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.PasswordHash, arg.Email)
	return err
}
