// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: proto/budget/budget.proto

package budget

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BudgetService_CreateBudget_FullMethodName       = "/BudgetService/CreateBudget"
	BudgetService_UpdateBudgetAmount_FullMethodName = "/BudgetService/UpdateBudgetAmount"
	BudgetService_GetBudgets_FullMethodName         = "/BudgetService/GetBudgets"
	BudgetService_DeleteBudgetByID_FullMethodName   = "/BudgetService/DeleteBudgetByID"
	BudgetService_GetBudgetReports_FullMethodName   = "/BudgetService/GetBudgetReports"
	BudgetService_AddSpentAmount_FullMethodName     = "/BudgetService/AddSpentAmount"
)

// BudgetServiceClient is the client API for BudgetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BudgetServiceClient interface {
	CreateBudget(ctx context.Context, in *BudgetInfo, opts ...grpc.CallOption) (*BudgetID, error)
	UpdateBudgetAmount(ctx context.Context, in *BudgetUpdate, opts ...grpc.CallOption) (*BudgetResponse, error)
	GetBudgets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (BudgetService_GetBudgetsClient, error)
	DeleteBudgetByID(ctx context.Context, in *BudgetID, opts ...grpc.CallOption) (*BudgetResponse, error)
	GetBudgetReports(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BudgetReport, error)
	AddSpentAmount(ctx context.Context, in *SpentRequest, opts ...grpc.CallOption) (*BudgetResponse, error)
}

type budgetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBudgetServiceClient(cc grpc.ClientConnInterface) BudgetServiceClient {
	return &budgetServiceClient{cc}
}

func (c *budgetServiceClient) CreateBudget(ctx context.Context, in *BudgetInfo, opts ...grpc.CallOption) (*BudgetID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BudgetID)
	err := c.cc.Invoke(ctx, BudgetService_CreateBudget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) UpdateBudgetAmount(ctx context.Context, in *BudgetUpdate, opts ...grpc.CallOption) (*BudgetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BudgetResponse)
	err := c.cc.Invoke(ctx, BudgetService_UpdateBudgetAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) GetBudgets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (BudgetService_GetBudgetsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BudgetService_ServiceDesc.Streams[0], BudgetService_GetBudgets_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &budgetServiceGetBudgetsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BudgetService_GetBudgetsClient interface {
	Recv() (*BudgetWithID, error)
	grpc.ClientStream
}

type budgetServiceGetBudgetsClient struct {
	grpc.ClientStream
}

func (x *budgetServiceGetBudgetsClient) Recv() (*BudgetWithID, error) {
	m := new(BudgetWithID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *budgetServiceClient) DeleteBudgetByID(ctx context.Context, in *BudgetID, opts ...grpc.CallOption) (*BudgetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BudgetResponse)
	err := c.cc.Invoke(ctx, BudgetService_DeleteBudgetByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) GetBudgetReports(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BudgetReport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BudgetReport)
	err := c.cc.Invoke(ctx, BudgetService_GetBudgetReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) AddSpentAmount(ctx context.Context, in *SpentRequest, opts ...grpc.CallOption) (*BudgetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BudgetResponse)
	err := c.cc.Invoke(ctx, BudgetService_AddSpentAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BudgetServiceServer is the server API for BudgetService service.
// All implementations must embed UnimplementedBudgetServiceServer
// for forward compatibility
type BudgetServiceServer interface {
	CreateBudget(context.Context, *BudgetInfo) (*BudgetID, error)
	UpdateBudgetAmount(context.Context, *BudgetUpdate) (*BudgetResponse, error)
	GetBudgets(*Empty, BudgetService_GetBudgetsServer) error
	DeleteBudgetByID(context.Context, *BudgetID) (*BudgetResponse, error)
	GetBudgetReports(context.Context, *Empty) (*BudgetReport, error)
	AddSpentAmount(context.Context, *SpentRequest) (*BudgetResponse, error)
	mustEmbedUnimplementedBudgetServiceServer()
}

// UnimplementedBudgetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBudgetServiceServer struct {
}

func (UnimplementedBudgetServiceServer) CreateBudget(context.Context, *BudgetInfo) (*BudgetID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBudget not implemented")
}
func (UnimplementedBudgetServiceServer) UpdateBudgetAmount(context.Context, *BudgetUpdate) (*BudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBudgetAmount not implemented")
}
func (UnimplementedBudgetServiceServer) GetBudgets(*Empty, BudgetService_GetBudgetsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBudgets not implemented")
}
func (UnimplementedBudgetServiceServer) DeleteBudgetByID(context.Context, *BudgetID) (*BudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBudgetByID not implemented")
}
func (UnimplementedBudgetServiceServer) GetBudgetReports(context.Context, *Empty) (*BudgetReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBudgetReports not implemented")
}
func (UnimplementedBudgetServiceServer) AddSpentAmount(context.Context, *SpentRequest) (*BudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSpentAmount not implemented")
}
func (UnimplementedBudgetServiceServer) mustEmbedUnimplementedBudgetServiceServer() {}

// UnsafeBudgetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BudgetServiceServer will
// result in compilation errors.
type UnsafeBudgetServiceServer interface {
	mustEmbedUnimplementedBudgetServiceServer()
}

func RegisterBudgetServiceServer(s grpc.ServiceRegistrar, srv BudgetServiceServer) {
	s.RegisterService(&BudgetService_ServiceDesc, srv)
}

func _BudgetService_CreateBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BudgetInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).CreateBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetService_CreateBudget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).CreateBudget(ctx, req.(*BudgetInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_UpdateBudgetAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BudgetUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).UpdateBudgetAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetService_UpdateBudgetAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).UpdateBudgetAmount(ctx, req.(*BudgetUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_GetBudgets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BudgetServiceServer).GetBudgets(m, &budgetServiceGetBudgetsServer{ServerStream: stream})
}

type BudgetService_GetBudgetsServer interface {
	Send(*BudgetWithID) error
	grpc.ServerStream
}

type budgetServiceGetBudgetsServer struct {
	grpc.ServerStream
}

func (x *budgetServiceGetBudgetsServer) Send(m *BudgetWithID) error {
	return x.ServerStream.SendMsg(m)
}

func _BudgetService_DeleteBudgetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BudgetID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).DeleteBudgetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetService_DeleteBudgetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).DeleteBudgetByID(ctx, req.(*BudgetID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_GetBudgetReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).GetBudgetReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetService_GetBudgetReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).GetBudgetReports(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_AddSpentAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).AddSpentAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetService_AddSpentAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).AddSpentAmount(ctx, req.(*SpentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BudgetService_ServiceDesc is the grpc.ServiceDesc for BudgetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BudgetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BudgetService",
	HandlerType: (*BudgetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBudget",
			Handler:    _BudgetService_CreateBudget_Handler,
		},
		{
			MethodName: "UpdateBudgetAmount",
			Handler:    _BudgetService_UpdateBudgetAmount_Handler,
		},
		{
			MethodName: "DeleteBudgetByID",
			Handler:    _BudgetService_DeleteBudgetByID_Handler,
		},
		{
			MethodName: "GetBudgetReports",
			Handler:    _BudgetService_GetBudgetReports_Handler,
		},
		{
			MethodName: "AddSpentAmount",
			Handler:    _BudgetService_AddSpentAmount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBudgets",
			Handler:       _BudgetService_GetBudgets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/budget/budget.proto",
}
