// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package storage

import (
	"context"
)

const addSpentAmount = `-- name: AddSpentAmount :exec
UPDATE budgets
SET spent = spent + $1
WHERE id = $2 and amount >= spent + $1
`

type AddSpentAmountParams struct {
	Spent float64
	ID    string
}

func (q *Queries) AddSpentAmount(ctx context.Context, arg AddSpentAmountParams) error {
	_, err := q.db.ExecContext(ctx, addSpentAmount, arg.Spent, arg.ID)
	return err
}

const createBudget = `-- name: CreateBudget :one
INSERT INTO budgets(id, user_id, category, amount, spent, currency)
VALUES($1, $2, $3, $4, $5, $6)
RETURNING id
`

type CreateBudgetParams struct {
	ID       string
	UserID   string
	Category string
	Amount   float64
	Spent    float64
	Currency string
}

func (q *Queries) CreateBudget(ctx context.Context, arg CreateBudgetParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createBudget,
		arg.ID,
		arg.UserID,
		arg.Category,
		arg.Amount,
		arg.Spent,
		arg.Currency,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteBudgetByID = `-- name: DeleteBudgetByID :exec
DELETE FROM budgets
WHERE id = $1 and user_id = $2
`

type DeleteBudgetByIDParams struct {
	ID     string
	UserID string
}

func (q *Queries) DeleteBudgetByID(ctx context.Context, arg DeleteBudgetByIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteBudgetByID, arg.ID, arg.UserID)
	return err
}

const getBudgetReport = `-- name: GetBudgetReport :one
SELECT SUM(amount) as total_budget, SUM(spent) as total_spent  FROM budgets
WHERE user_id = $1
`

type GetBudgetReportRow struct {
	TotalBudget int64
	TotalSpent  int64
}

func (q *Queries) GetBudgetReport(ctx context.Context, userID string) (GetBudgetReportRow, error) {
	row := q.db.QueryRowContext(ctx, getBudgetReport, userID)
	var i GetBudgetReportRow
	err := row.Scan(&i.TotalBudget, &i.TotalSpent)
	return i, err
}

const getBudgets = `-- name: GetBudgets :many
SELECT id, category, amount, spent, currency FROM budgets
WHERE user_id = $1
`

type GetBudgetsRow struct {
	ID       string
	Category string
	Amount   float64
	Spent    float64
	Currency string
}

func (q *Queries) GetBudgets(ctx context.Context, userID string) ([]GetBudgetsRow, error) {
	rows, err := q.db.QueryContext(ctx, getBudgets, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBudgetsRow
	for rows.Next() {
		var i GetBudgetsRow
		if err := rows.Scan(
			&i.ID,
			&i.Category,
			&i.Amount,
			&i.Spent,
			&i.Currency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSpentFromBudget = `-- name: GetSpentFromBudget :one
SELECT spent from budgets
WHERE id = $1 and user_id = $2
`

type GetSpentFromBudgetParams struct {
	ID     string
	UserID string
}

func (q *Queries) GetSpentFromBudget(ctx context.Context, arg GetSpentFromBudgetParams) (float64, error) {
	row := q.db.QueryRowContext(ctx, getSpentFromBudget, arg.ID, arg.UserID)
	var spent float64
	err := row.Scan(&spent)
	return spent, err
}

const updateBudgetByID = `-- name: UpdateBudgetByID :exec
UPDATE budgets
SET  amount = $1
WHERE id = $2 and user_id = $3
`

type UpdateBudgetByIDParams struct {
	Amount float64
	ID     string
	UserID string
}

func (q *Queries) UpdateBudgetByID(ctx context.Context, arg UpdateBudgetByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateBudgetByID, arg.Amount, arg.ID, arg.UserID)
	return err
}
